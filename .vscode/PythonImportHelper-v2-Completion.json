[
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "easyocr",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "easyocr",
        "description": "easyocr",
        "detail": "easyocr",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "ScraperFile",
        "importPath": "src.schemas",
        "description": "src.schemas",
        "isExtraImport": true,
        "detail": "src.schemas",
        "documentation": {}
    },
    {
        "label": "ScraperLibs",
        "importPath": "src.domain.enums.scraper_libs",
        "description": "src.domain.enums.scraper_libs",
        "isExtraImport": true,
        "detail": "src.domain.enums.scraper_libs",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "scraper_bp",
        "importPath": "src.services.scraper.scraper",
        "description": "src.services.scraper.scraper",
        "isExtraImport": true,
        "detail": "src.services.scraper.scraper",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "scraper_bp",
        "importPath": "services.scraper",
        "description": "services.scraper",
        "isExtraImport": true,
        "detail": "services.scraper",
        "documentation": {}
    },
    {
        "label": "extract_text",
        "kind": 2,
        "importPath": "services.scraper",
        "description": "services.scraper",
        "peekOfCode": "def extract_text(ocr_type):\n    print(torch.cuda.is_available())\n    if 'image' not in request.files:\n        return jsonify({'error': 'Teste'}), 400\n    file = request.files['image']\n    image = Image.open(file)\n    extracted_text = ''\n    image_np = np.array(image)\n    match ocr_type.lower():\n        case 'easyocr':",
        "detail": "services.scraper",
        "documentation": {}
    },
    {
        "label": "scraper_bp",
        "kind": 5,
        "importPath": "services.scraper",
        "description": "services.scraper",
        "peekOfCode": "scraper_bp = Blueprint(\"scraper\", __name__, description=\"Operações de OCR\")\neasyocr_reader = easyocr.Reader(['en', 'pt'])\n@scraper_bp.route('/extract-text/<string:ocr_type>', methods=['POST'])\ndef extract_text(ocr_type):\n    print(torch.cuda.is_available())\n    if 'image' not in request.files:\n        return jsonify({'error': 'Teste'}), 400\n    file = request.files['image']\n    image = Image.open(file)\n    extracted_text = ''",
        "detail": "services.scraper",
        "documentation": {}
    },
    {
        "label": "easyocr_reader",
        "kind": 5,
        "importPath": "services.scraper",
        "description": "services.scraper",
        "peekOfCode": "easyocr_reader = easyocr.Reader(['en', 'pt'])\n@scraper_bp.route('/extract-text/<string:ocr_type>', methods=['POST'])\ndef extract_text(ocr_type):\n    print(torch.cuda.is_available())\n    if 'image' not in request.files:\n        return jsonify({'error': 'Teste'}), 400\n    file = request.files['image']\n    image = Image.open(file)\n    extracted_text = ''\n    image_np = np.array(image)",
        "detail": "services.scraper",
        "documentation": {}
    },
    {
        "label": "ScraperLibs",
        "kind": 6,
        "importPath": "src.domain.enums.scraper_libs",
        "description": "src.domain.enums.scraper_libs",
        "peekOfCode": "class ScraperLibs(Enum):\n    PYTESSERACT = 'pytesseract'\n    EASYOCR = 'easyocr'",
        "detail": "src.domain.enums.scraper_libs",
        "documentation": {}
    },
    {
        "label": "extract_text",
        "kind": 2,
        "importPath": "src.services.scraper.scraper",
        "description": "src.services.scraper.scraper",
        "peekOfCode": "def extract_text(ocr_type):\n    if 'image' not in request.files:\n        return jsonify({'error': 'Erro'}), 400\n    file = request.files['image']\n    image = Image.open(file)\n    extracted_text = ''\n    match ocr_type.lower():\n        case ScraperLibs.EASYOCR.value:\n            extracted_text = use_easyocr(image)\n        case ScraperLibs.PYTESSERACT.value:",
        "detail": "src.services.scraper.scraper",
        "documentation": {}
    },
    {
        "label": "use_pytesseract",
        "kind": 2,
        "importPath": "src.services.scraper.scraper",
        "description": "src.services.scraper.scraper",
        "peekOfCode": "def use_pytesseract(image):\n    config = '--oem 3 --psm 11'\n    extracted_text = pytesseract.image_to_string(image, config = config)\n    return extracted_text.replace('\\n', ' ')\ndef use_easyocr(image):\n    image_np = np.array(image)\n    return easyocr_reader.readtext(image_np, detail=0)",
        "detail": "src.services.scraper.scraper",
        "documentation": {}
    },
    {
        "label": "use_easyocr",
        "kind": 2,
        "importPath": "src.services.scraper.scraper",
        "description": "src.services.scraper.scraper",
        "peekOfCode": "def use_easyocr(image):\n    image_np = np.array(image)\n    return easyocr_reader.readtext(image_np, detail=0)",
        "detail": "src.services.scraper.scraper",
        "documentation": {}
    },
    {
        "label": "scraper_bp",
        "kind": 5,
        "importPath": "src.services.scraper.scraper",
        "description": "src.services.scraper.scraper",
        "peekOfCode": "scraper_bp = Blueprint(\"scraper\", __name__, description=\"Operações de OCR\")\neasyocr_reader = easyocr.Reader(['en', 'pt'])\n@scraper_bp.route('/extract-text/<string:ocr_type>', methods=['POST'])\n@scraper_bp.response(200, ScraperFile)\ndef extract_text(ocr_type):\n    if 'image' not in request.files:\n        return jsonify({'error': 'Erro'}), 400\n    file = request.files['image']\n    image = Image.open(file)\n    extracted_text = ''",
        "detail": "src.services.scraper.scraper",
        "documentation": {}
    },
    {
        "label": "easyocr_reader",
        "kind": 5,
        "importPath": "src.services.scraper.scraper",
        "description": "src.services.scraper.scraper",
        "peekOfCode": "easyocr_reader = easyocr.Reader(['en', 'pt'])\n@scraper_bp.route('/extract-text/<string:ocr_type>', methods=['POST'])\n@scraper_bp.response(200, ScraperFile)\ndef extract_text(ocr_type):\n    if 'image' not in request.files:\n        return jsonify({'error': 'Erro'}), 400\n    file = request.files['image']\n    image = Image.open(file)\n    extracted_text = ''\n    match ocr_type.lower():",
        "detail": "src.services.scraper.scraper",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"API_TITLE\"] = \"Scraper\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"PROPAGATE_EXCEPTIONS\"]",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"API_TITLE\"] = \"Scraper\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_TITLE\"]",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app.config[\"API_TITLE\"] = \"Scraper\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_VERSION\"]",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_VERSION\"]",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_URL_PREFIX\"]",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "api = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "ScraperFile",
        "kind": 6,
        "importPath": "src.schemas",
        "description": "src.schemas",
        "peekOfCode": "class ScraperFile(Schema):\n    extractedText = fields.Str(required=True)\n    ocrType = fields.Str(required=True)",
        "detail": "src.schemas",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"API_TITLE\"] = \"Scraper\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"PROPAGATE_EXCEPTIONS\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"API_TITLE\"] = \"Scraper\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_TITLE\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"API_TITLE\"] = \"Scraper\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_VERSION\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_VERSION\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_URL_PREFIX\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napi = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "api = Api(app)\napi.register_blueprint(scraper_bp)",
        "detail": "app",
        "documentation": {}
    }
]